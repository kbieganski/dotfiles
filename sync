#!/bin/env zsh

dotfiles_dir=$(dirname ${(%):-%N})
pkg_dir=pkg
pacman_req_pkgs=$pkg_dir/pacman.txt
pacman_cur_pkgs=$pkg_dir/.pacman.txt
secret_dir=ext/dotfiles-secret

function section {
    echo "=> \e[34m$*\e[0m"
}

function silent {
    local temp=$(mktemp)
    $* &> $temp
    if [ $? -ne 0 ]; then
        < $temp
        echo "\e[31mFailed: '\e[0m$*\e[31m'\e[0m"
        exit 1
    fi
}

cd $dotfiles_dir

section "Pulling changes"
old_commit=$(git rev-parse HEAD)
silent git pull
silent git submodule update --init --recursive --remote
silent stow $dotfiles_dir
if [ "$old_commit" != "$(git rev-parse HEAD)" ]; then
    section "Re-running self"
    exec $0
fi

section "Deleting Arch packages"
touch $pacman_cur_pkgs
pacman_del_pkgs=$(comm -23 <(sort < $pacman_cur_pkgs) <(sort < $pacman_req_pkgs))
if [ -n "$pacman_del_pkgs" ]; then
    silent sudo pacman -Rs --noconfirm ${=pacman_del_pkgs}
fi

section "Installing Arch packages"
pacman_new_pkgs=$(comm -13 <(sort < $pacman_cur_pkgs) <(sort < $pacman_req_pkgs))
if [ -n "$pacman_new_pkgs" ]; then
    silent sudo pacman -Sy --noconfirm --needed ${=pacman_new_pkgs}
fi

section "Saving Arch package list"
pacman -Qqne | rg -v "(amd|intel|nvidia|cuda|wacom)" | sort > $pacman_cur_pkgs
cp $pacman_cur_pkgs $pacman_req_pkgs
git add $pacman_req_pkgs

section "Installing AUR packages"
function PKGBUILD_get {
    grep "$1"= < PKGBUILD | cut -d= -f2
}
for pkg_path in ext/aur/*; do
    silent pushd $pkg_path
    pkgname=$(PKGBUILD_get pkgname)
    pkgver=$(PKGBUILD_get pkgver)
    pkgrel=$(PKGBUILD_get pkgrel)
    if [ "$(pacman -Q | grep "$pkgname " | cut -d' ' -f2)" != "$pkgver-$pkgrel" ]; then
        silent makepkg -si --needed --noconfirm
    fi
    silent popd
done

section "Installing Python packages"
while read pkg; do
    silent pipx install --force $pkg
done < $pkg_dir/pipx.txt

section "Installing Rust packages"
silent rustup self upgrade-data
for toolchain in stable nightly; do
    silent rustup toolchain install --profile default $toolchain
    while read pkg; do
        silent rustup +$toolchain component add $pkg
    done < $pkg_dir/rustup-$toolchain.txt
    while read pkg; do
        silent cargo +$toolchain install $pkg
    done < $pkg_dir/cargo.txt
done

section "Installing Go packages"
while read pkg; do
    silent go install $pkg
done < $pkg_dir/go.txt

if [ -n "$(git -C $secret_dir diff --staged --name-only)" ] ||
    [ -n "$(git diff --staged --name-only)" ]; then
    section "Committing and pushing changes"
    remote=$(git remote get-url origin)
    if [[ "$remote" =~ "https://" ]]; then
        silent git remote set-url origin $(echo $remote | sed -E "s/https:\/\/([^/]*)\//git@\1:/")
    fi
    if [ -n "$(git -C $secret_dir diff --staged --name-only)" ]; then
        silent git -C $secret_dir save
        silent git -C $secret_dir push
    fi
    silent git add $secret_dir
    silent git save
    silent git push
fi

section "Syncing Neovim plugins"
silent nvim '+Lazy! sync' +qa

section "Updating bat cache"
silent bat cache --build

section "Restarting i3"
silent i3-msg restart

echo "\e[32mDone.\e[0m"
